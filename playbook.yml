---
- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
    - config.yml

  tasks:
    - name: Provision webserver instances
      ec2:
        key_name: "{{ key_pair }}"
        group: "{{ security_group }}"
        instance_type: "{{ instance_type }}"
        image: "{{ ami_id }}"
        wait: true
        exact_count: 2
        count_tag:
          Name: web
        instance_tags:
          Name: web 
        monitoring: yes
        assign_public_ip: yes
        vpc_subnet_id: "{{ vpc_subnet_id }}"
      register: ec2_web

    - name: Provision DB instance
      ec2:
        key_name: "{{ key_pair }}"
        group: "{{ security_group }}"
        instance_type: "{{ instance_type }}"
        image: "{{ ami_id }}"
        wait: true
        exact_count: 1
        count_tag:
          Name: db
        instance_tags:
          Name: db
        monitoring: yes
        assign_public_ip: yes
        vpc_subnet_id: "{{ vpc_subnet_id }}"
      register: ec2_db

    - name: Add webserver IPs to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: webhosts
      with_items:
        - '{{ ec2_web.instances }}'

    - name: Add db IP to host group
      add_host: 
        hostname: "{{ item.public_ip }}"
        groupname: db
      with_items:
        - '{{ ec2_db.instances }}'

    - name: Provision ELB
      local_action:
        module: ec2_elb_lb
        name: avntelb
        state: present
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
        health_check:
            ping_protocol: http
            ping_port: 80
            ping_path: "/"
            response_timeout: 5
            interval: 60
            unhealthy_threshold: 2
            healthy_threshold: 6
        subnets:
          - "{{ vpc_subnet_id }}"
        instance_ids:
          - "{{ item.id }}"
      with_items:
        - "{{ ec2_web.instances }}"

    - name: Wait for SSH 
      local_action: wait_for host="{{ item.public_ip }}" port=22
      with_items:
        - "{{ ec2_web.instances }}"
        - "{{ ec2_db.instances }}"

- hosts: webhosts
  name: configure hosts
  user: ec2-user 
  become: true
  become_user: root
  gather_facts: true
  tasks:
    - name: Update system pkgs
      yum:
        name: '*'
        state: latest

    - name: Install epel repo
      yum:
        name: epel-release
        state: present

    - name: Install python stuffs
      yum:
        name: "{{ item }}"
        state: latest
      with_items:
        - python-devel
        - python-pip

    - name: Update python-pip
      pip:
        name: pip
        state: latest

    - name: Install python libs
      pip:
        name: "{{ item }}"
        state: latest
      with_items:
        - flask
        - pymongo

    - name: Create flask user
      user:
        name: flask
        group: flask
        state: present
        shell: /bin/bash

    - name: Clone repo to retrieve webserver files
      git:
        repo: https://github.com/jonathanmoneil/AVNT
        dest: /opt

    - name: copy systemd unit for flask server to systemd dir
      command: mv /opt/AVNT/web/flask.service /usr/lib/systemd/system/flask.service

    - name: chown repo files to flask user
      command: chown -R flask:flask /opt/AVNT/web

    - name: reload systemd
      command: systemctl daemon-reload

    - name: start flask server
      service:
        name: flask
        state: started

- hosts: db
  name: configure db
  user: ec2-user 
  become: true
  become_user: root
  gather_facts: true
  tasks:
    - name: Install epel release package
      yum:
        name: epel-release
        state: present

    - name: Add MongoDB Repository
      yum_repository:
        name: mongodb
        description: MongoDB repository
        file: mongodb-org-3.2
        baseurl: https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.2/x86_64/
        gpgcheck: yes
        enabled: yes
        gpgkey: https://www.mongodb.org/static/pgp/server-3.2.asc

    - name: Update pkgs
      yum:
        name: "*"
        state: latest

    - name: Install basic packages
      yum:
        name: "{{ item }}"
        state: present
      with_items:
        - ansible
        - dkms
        - git
        - kernel-devel
        - mongodb-org
        - openssl
        - python-pip
        - screen
        - vim

    - name: Create Mongo directories
      file:
        state: directory
        path: "{{ item }}"
        owner: mongod
        group: mongod
        mode: 0755
      with_items:
        - /mongodb
        - /mongodb/data
        - /mongodb/logs
        - /mongodb/ssl

    - name: Touch mongod.log
      file:
        state: touch
        name: /mongod/logs/mongod.log
        owner: mongod
        group: mongod
        mode: 0644

    - name: Install mongo config
      command: mv /opt/AVNT/db/mongod.conf /mongodb/mongod.conf

    - name: Install systemd unit for mongod
      command: mv /opt/AVNT/db/mongod.service /usr/lib/systemd/system/mongod.service

    - name: Reload systemd
      command: "systemctl daemon-reload"
